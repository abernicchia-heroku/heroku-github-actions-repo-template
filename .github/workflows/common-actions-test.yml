name: Common Actions Test

on:
  workflow_dispatch:
    # Enables running the workflow manually
    # https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#workflow_dispatch

jobs:
  test-bash:
    runs-on: self-hosted
    
    steps:
    - name: Print out runner env vars
      shell: bash
      run: |
        echo "Print out runner env vars ..."
        env

  test-setup-ruby:
    runs-on: self-hosted
    
    steps:
    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.2'
    
    - name: Install required gems
      run: |
        gem install httparty
        gem install terminal-table
    
    - name: Check API Status
      run: |
        ruby <<-'RUBY'
          require 'httparty'
          require 'terminal-table'
          
          ENDPOINTS = [
            'https://api.github.com/zen',
            'https://api.github.com/emojis'
          ]
          
          results = ENDPOINTS.map do |url|
            response = HTTParty.get(url)
            [url, response.code, response.message]
          rescue => e
            [url, 'ERROR', e.message]
          end
          
          table = Terminal::Table.new(
            headings: ['Endpoint', 'Status', 'Message'],
            rows: results
          )
          
          puts table
        RUBY

  test-setup-go:
    runs-on: self-hosted
    
    steps:
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
    
    - name: Run inline script
      run: |
        cat > script.go <<'EOG'
        package main

        import (
            "fmt"
            "time"
            "runtime"
        )

        func main() {
            fmt.Printf("Go Version: %s\n", runtime.Version())
            fmt.Printf("Current time: %s\n", time.Now().Format(time.RFC3339))
            fmt.Printf("GOOS: %s, GOARCH: %s\n", runtime.GOOS, runtime.GOARCH)
        }
        EOG

        go run script.go

  test-upload-download-artifacts:
    runs-on: self-hosted

    steps:
    - name: Generate data
      run: |
        # Create a directory for our files
        mkdir -p data
        
        # Generate some sample files
        echo "Hello from file 1" > data/file1.txt
        echo "Hello from file 2" > data/file2.txt
        
        # Create a timestamp file
        date > data/timestamp.txt
    
    - name: Upload files
      uses: actions/upload-artifact@v4
      with:
        name: my-files
        path: data/
        retention-days: 5
    
    - name: Process something else
      run: echo "Doing some other work..."
    
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: my-files
        path: processed-data
    
    - name: Use downloaded files
      run: |
        echo "Contents of downloaded files:"
        ls -la processed-data
        cat processed-data/timestamp.txt
